Copyright 2018 Mouse-Produced Games.
Distributed under the terms of the GNU Lesser General Public Liceense (Version 3, 29 June 2007)

<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Microsoft Visual Studio">
<TITLE></TITLE>
</HEAD>
<BODY>
    <p>
        The code now contains almost no macros, and has been entirely re-written and redesigned using templates.
    <p>
        A bytecode consists of:
        <ul>
            <li>One 8-bit data type (enum class DT).</li>
            <li>One 8-bit op-code (enum class OP).</li>
            <li>Up to two 8-bit memory locations (enum class ML).</li>
            <li>No less than 32 bits; padding may be added to reach this value.</li>
        </ul>
        Note that ML values of 2 or greater refer to registers 0-253
    </p>
    <p>
        Directory listing:
        <ul>
            <li>Docs: Contains documentation on the multi-platform assembly runtime and solution.</li>
            <ul>
                <li>Programmers: Contains documentation on the codebase.</li>
                <li>SystemCalls: Contains documentation on the system calls available from the runtime.</li>
                <li>mpasm_program_format.htm: Declares the format of a file containing MPASM bytecode.</li>
            </ul>
            <li>runtime: Contains code for executing MPASM programs using interpretation.</li>
            <ul>
                <li>parray_datacalls.cpp/h: Contains code for storing and retreiving parray data.</li>
                <li>parray_opcalls.cpp/h: Contains code for executing operations on parrays.</li>
                <li>ptr_datacalls.cpp/h: Contains code for storing and retreiving pointer data.</li>
                <li>ptr_opcalls.cpp/h: Contains code for executing operations on data stored in a pointer.</li>
                <li>runtimecommandmap.cpp/h: Contains an implementation that maps operations to calls.</li>
                <li>runtimesyscallhive.cpp/h: Contains an implementation that maps system calls to interfaces.</li>
                <li>value_datacalls.cpp/h: Contains code for storing and retreiving data.</li>
                <li>value_opcalls.cpp/h: Contains code for executing operations on data.</li>
            </ul>
            <li>syscall_console: Contains code for calling into the console system.</li>
            <ul>
                <li>console_ops.h: Enumeration of console operations.</li>
                <li>runtimeconsolecallhive.cpp/h: Contains code for executing console calls.</li>
            </ul>
            <li>syscall_memory: Contains code for calling into the platform memory system.</li>
            <ul>
                <li>memory_ops.h: Enumeration of platform memory operations.</li>
                <li>runtimememorycallhive.cpp/h: Contains code for executing platform memory calls.</li>
            </ul>
            <li>bytecode.h: Defines DT, OP, ML, and a reference bytecode struct.</li>
            <li>*.mpasm: Test mpasm programs.</li>
            <li>icommand.cpp/h: Defines the interface for classes that implement operations on datatypes.</li>
            <li>subcallhive.h: Defines the interface for classes that implement a class of system calls.</li>
            <li>syscallhive.h: Defines the interface for classes that receive and dispatch system calls.</li>
            <li>mpasm.cpp: The main file. In test mode, hardcalls a specific *.mpasm file. Otherwise, runs the first .mpasm file in the command line.</li>
            <li>parray.h: Defines the pointer-to-array type used (with explicit length).</li>
            <li>registers.cpp: Implements registers for all datatypes, pointer-to-datatypes, and pointer-to-arrays of datatypes using templates.</li>
            <li>registers.h: Declares the register template as extern.</li>
            <li>run_context.cpp/.h: Contains the runtime context type which decodes and dispatches datatypes to the appropriate data type opcode handler (see bytecode_op_funcs).</li>
            <li>stdafx.h/cpp: Standard defines.</li>
            <li>targetver.h: Defines the target version.</li>
        </ul>
    </p>
</BODY>
</HTML>
